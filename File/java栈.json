[
  {
    "title": "java 栈",
    "content": "<div class='article-body'><div class='article-intro' id='content'><h1>Java Stack  类</h1><p>栈是Vector的一个子类，它实现了一个标准的后进先出的栈。</p><p>堆栈只定义了默认构造函数，用来创建一个空栈。 堆栈除了包括由Vector定义的所有方法，也定义了自己的一些方法。</p><pre>Stack()</pre><p>除了由Vector定义的所有方法，自己也定义了一些方法：</p><table class='reference'><tbody><tr><th>序号</th><th>方法描述</th></tr><tr><td>1</td><td>boolean empty()&nbsp;<br>测试堆栈是否为空。</td></tr><tr><td>2</td><td>Object peek( )<br>查看堆栈顶部的对象，但不从堆栈中移除它。</td></tr><tr><td>3</td><td>Object pop( )<br>移除堆栈顶部的对象，并作为此函数的值返回该对象。</td></tr><td>4</td><td>Object push(Object element)<br>把项压入堆栈顶部。</td></tr><tr><td>5</td><td>int search(Object element)<br>返回对象在堆栈中的位置，以 1 为基数。</td></tr></tbody></table><h3>实例</h3><p>下面的程序说明这个集合所支持的几种方法</p><div class='example'><h2 class='example'>实例</h2><div class='example_code'><div class='hl-main'><span class='hl-reserved'>import</span><span class='hl-code'> </span><span class='hl-identifier'>java</span><span class='hl-code'>.</span><span class='hl-identifier'>util</span><span class='hl-code'>.*;</span><span class='hl-reserved'>public</span><span class='hl-code'> </span><span class='hl-reserved'>class</span><span class='hl-code'> </span><span class='hl-identifier'>StackDemo</span><span class='hl-code'> </span><span class='hl-brackets'>{</span><span class='hl-code'></span><span class='hl-types'>static</span><span class='hl-code'> </span><span class='hl-types'>void</span><span class='hl-code'> </span><span class='hl-identifier'>showpush</span><span class='hl-brackets'>(</span><span class='hl-identifier'>Stack</span><span class='hl-code'>&lt;</span><span class='hl-identifier'>Integer</span><span class='hl-code'>&gt; </span><span class='hl-identifier'>st</span><span class='hl-code'>, </span><span class='hl-types'>int</span><span class='hl-code'> </span><span class='hl-identifier'>a</span><span class='hl-brackets'>)</span><span class='hl-code'> </span><span class='hl-brackets'>{</span><span class='hl-code'></span><span class='hl-identifier'>st</span><span class='hl-code'>.</span><span class='hl-identifier'>push</span><span class='hl-brackets'>(</span><span class='hl-reserved'>new</span><span class='hl-code'> </span><span class='hl-identifier'>Integer</span><span class='hl-brackets'>(</span><span class='hl-identifier'>a</span><span class='hl-brackets'>)</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>System</span><span class='hl-code'>.</span><span class='hl-identifier'>out</span><span class='hl-code'>.</span><span class='hl-identifier'>println</span><span class='hl-brackets'>(</span><span class='hl-quotes'>&quot;</span><span class='hl-string'>push(</span><span class='hl-quotes'>&quot;</span><span class='hl-code'> + </span><span class='hl-identifier'>a</span><span class='hl-code'> + </span><span class='hl-quotes'>&quot;</span><span class='hl-string'>)</span><span class='hl-quotes'>&quot;</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>System</span><span class='hl-code'>.</span><span class='hl-identifier'>out</span><span class='hl-code'>.</span><span class='hl-identifier'>println</span><span class='hl-brackets'>(</span><span class='hl-quotes'>&quot;</span><span class='hl-string'>stack: </span><span class='hl-quotes'>&quot;</span><span class='hl-code'> + </span><span class='hl-identifier'>st</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-brackets'>}</span><span class='hl-code'></span><span class='hl-types'>static</span><span class='hl-code'> </span><span class='hl-types'>void</span><span class='hl-code'> </span><span class='hl-identifier'>showpop</span><span class='hl-brackets'>(</span><span class='hl-identifier'>Stack</span><span class='hl-code'>&lt;</span><span class='hl-identifier'>Integer</span><span class='hl-code'>&gt; </span><span class='hl-identifier'>st</span><span class='hl-brackets'>)</span><span class='hl-code'> </span><span class='hl-brackets'>{</span><span class='hl-code'></span><span class='hl-identifier'>System</span><span class='hl-code'>.</span><span class='hl-identifier'>out</span><span class='hl-code'>.</span><span class='hl-identifier'>print</span><span class='hl-brackets'>(</span><span class='hl-quotes'>&quot;</span><span class='hl-string'>pop -&gt; </span><span class='hl-quotes'>&quot;</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>Integer</span><span class='hl-code'> </span><span class='hl-identifier'>a</span><span class='hl-code'> = </span><span class='hl-brackets'>(</span><span class='hl-identifier'>Integer</span><span class='hl-brackets'>)</span><span class='hl-code'> </span><span class='hl-identifier'>st</span><span class='hl-code'>.</span><span class='hl-identifier'>pop</span><span class='hl-brackets'>(</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>System</span><span class='hl-code'>.</span><span class='hl-identifier'>out</span><span class='hl-code'>.</span><span class='hl-identifier'>println</span><span class='hl-brackets'>(</span><span class='hl-identifier'>a</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>System</span><span class='hl-code'>.</span><span class='hl-identifier'>out</span><span class='hl-code'>.</span><span class='hl-identifier'>println</span><span class='hl-brackets'>(</span><span class='hl-quotes'>&quot;</span><span class='hl-string'>stack: </span><span class='hl-quotes'>&quot;</span><span class='hl-code'> + </span><span class='hl-identifier'>st</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-brackets'>}</span><span class='hl-code'></span><span class='hl-reserved'>public</span><span class='hl-code'> </span><span class='hl-types'>static</span><span class='hl-code'> </span><span class='hl-types'>void</span><span class='hl-code'> </span><span class='hl-identifier'>main</span><span class='hl-brackets'>(</span><span class='hl-identifier'>String</span><span class='hl-code'> </span><span class='hl-identifier'>args</span><span class='hl-brackets'>[</span><span class='hl-brackets'>]</span><span class='hl-brackets'>)</span><span class='hl-code'> </span><span class='hl-brackets'>{</span><span class='hl-code'></span><span class='hl-identifier'>Stack</span><span class='hl-code'>&lt;</span><span class='hl-identifier'>Integer</span><span class='hl-code'>&gt; </span><span class='hl-identifier'>st</span><span class='hl-code'> = </span><span class='hl-reserved'>new</span><span class='hl-code'> </span><span class='hl-identifier'>Stack</span><span class='hl-code'>&lt;</span><span class='hl-identifier'>Integer</span><span class='hl-code'>&gt;</span><span class='hl-brackets'>(</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>System</span><span class='hl-code'>.</span><span class='hl-identifier'>out</span><span class='hl-code'>.</span><span class='hl-identifier'>println</span><span class='hl-brackets'>(</span><span class='hl-quotes'>&quot;</span><span class='hl-string'>stack: </span><span class='hl-quotes'>&quot;</span><span class='hl-code'> + </span><span class='hl-identifier'>st</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>showpush</span><span class='hl-brackets'>(</span><span class='hl-identifier'>st</span><span class='hl-code'>, </span><span class='hl-number'>42</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>showpush</span><span class='hl-brackets'>(</span><span class='hl-identifier'>st</span><span class='hl-code'>, </span><span class='hl-number'>66</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>showpush</span><span class='hl-brackets'>(</span><span class='hl-identifier'>st</span><span class='hl-code'>, </span><span class='hl-number'>99</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>showpop</span><span class='hl-brackets'>(</span><span class='hl-identifier'>st</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>showpop</span><span class='hl-brackets'>(</span><span class='hl-identifier'>st</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-identifier'>showpop</span><span class='hl-brackets'>(</span><span class='hl-identifier'>st</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-reserved'>try</span><span class='hl-code'> </span><span class='hl-brackets'>{</span><span class='hl-code'></span><span class='hl-identifier'>showpop</span><span class='hl-brackets'>(</span><span class='hl-identifier'>st</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-brackets'>}</span><span class='hl-code'> </span><span class='hl-reserved'>catch</span><span class='hl-code'> </span><span class='hl-brackets'>(</span><span class='hl-identifier'>EmptyStackException</span><span class='hl-code'> </span><span class='hl-identifier'>e</span><span class='hl-brackets'>)</span><span class='hl-code'> </span><span class='hl-brackets'>{</span><span class='hl-code'></span><span class='hl-identifier'>System</span><span class='hl-code'>.</span><span class='hl-identifier'>out</span><span class='hl-code'>.</span><span class='hl-identifier'>println</span><span class='hl-brackets'>(</span><span class='hl-quotes'>&quot;</span><span class='hl-string'>empty stack</span><span class='hl-quotes'>&quot;</span><span class='hl-brackets'>)</span><span class='hl-code'>;</span><span class='hl-brackets'>}</span><span class='hl-code'></span><span class='hl-brackets'>}</span><span class='hl-code'></span><span class='hl-brackets'>}</span></div></div></div><p>以上实例编译运行结果如下： </p><pre>stack: [ ]push(42)stack: [42]push(66)stack: [42, 66]push(99)stack: [42, 66, 99]pop -&gt; 99stack: [42, 66]pop -&gt; 66stack: [42]pop -&gt; 42stack: [ ]pop -&gt; empty stack</pre></div></div></div>",
  "img": ""
  }
]
